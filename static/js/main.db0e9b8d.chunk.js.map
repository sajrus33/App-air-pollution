{"version":3,"sources":["components/SearchInput.js","components/NavBar.js","utils/sort.js","components/AccordionElement.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["suggestions","label","map","suggestion","value","useStyles","makeStyles","theme","root","flexGrow","marginTop","backgroundColor","input","display","padding","height","valueContainer","flexWrap","flex","alignItems","overflow","noOptionsMessage","spacing","singleValue","fontSize","placeholder","position","left","bottom","paper","zIndex","right","inputComponent","inputRef","props","ref","components","Control","children","innerProps","innerRef","selectProps","classes","TextFieldProps","TextField","fullWidth","InputProps","inputProps","className","Menu","Paper","square","NoOptionsMessage","Typography","color","Option","MenuItem","selected","isFocused","component","style","fontWeight","isSelected","Placeholder","SingleValue","ValueContainer","SearchInput","useTheme","React","useState","single","setSingle","selectStyles","base","palette","text","primary","font","NoSsr","isClearable","styles","inputId","InputLabelProps","htmlFor","shrink","options","onChange","onChangeSearch","bar","paddingTop","marginBottom","h1","marginRight","barBtn","barIco","NavBar","AppBar","variant","IconButton","aria-label","onClick","window","scrollTo","top","behavior","sortData","results","citiesData","locations","lastCityName","city","forEach","result","index","measures","measurements","measure","parameter","push","cityLocations","name","length","cityParamsAvarges","cityIndex","parSum","pm25","pm25Amount","pm10","pm10Amount","co","coAmount","o3","o3Amount","bc","bcAmount","so2","so2Amount","no2","no2Amount","location","params","Object","getOwnPropertyNames","keys","e","includes","Math","floor","cityName","cityParamsSum","cityMeasurements","sum","entries","param","sort","a","b","splice","top10Cities","width","overflowX","panelSummary","h2","typography","pxToRem","table","minWidth","pCityDescribe","AccordionElement","country","showed","Fade","in","timeout","ExpansionPanel","panelExpansion","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","Box","flexDirection","Table","TableHead","TableRow","TableCell","align","TableBody","key","progress","Main","cities","error","preloader","paragraph","CircularProgress","App","state","countryInput","countryName","accordionIsShowed","actualCountryInput","setState","getData","localData","JSON","parse","localStorage","getItem","localDataCountry","this","url","fetch","res","ok","setItem","stringify","json","data","datas","statusText","content","property","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db0e9b8d.chunk.js","sourcesContent":["import React from 'react'\nimport Select from 'react-select'\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport NoSsr from '@material-ui/core/NoSsr'\nimport TextField from '@material-ui/core/TextField'\nimport Paper from '@material-ui/core/Paper'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nconst suggestions = [\n  { label: 'France' },\n  { label: 'Germany' },\n  { label: 'Spain' },\n  { label: 'Poland' }\n].map((suggestion) => ({\n  value: suggestion.label,\n  label: suggestion.label\n}))\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    marginTop: 15,\n    backgroundColor: 'white'\n  },\n  input: {\n    display: 'flex',\n    padding: 0,\n    height: 'auto'\n  },\n  valueContainer: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flex: 1,\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  noOptionsMessage: {\n    padding: theme.spacing(1, 2)\n  },\n  singleValue: {\n    fontSize: 18\n  },\n  placeholder: {\n    position: 'absolute',\n    left: 2,\n    bottom: 6,\n    fontSize: 16\n  },\n  paper: {\n    position: 'absolute',\n    zIndex: 1,\n    marginTop: theme.spacing(1),\n    left: 0,\n    right: 0\n  }\n}))\n\nfunction NoOptionsMessage(props) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.noOptionsMessage}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  )\n}\n\nfunction inputComponent({ inputRef, ...props }) {\n  return <div ref={inputRef} {...props} />\n}\n\n\nfunction Control(props) {\n  const {\n    children,\n    innerProps,\n    innerRef,\n    selectProps: { classes, TextFieldProps }\n  } = props\n\n  return (\n    <TextField\n      fullWidth\n      InputProps={{\n        inputComponent,\n        inputProps: {\n          className: classes.input,\n          ref: innerRef,\n          children,\n          ...innerProps\n        }\n      }}\n      {...TextFieldProps}\n    />\n  )\n}\n\nfunction Option(props) {\n  return (\n    <MenuItem\n      ref={props.innerRef}\n      selected={props.isFocused}\n      component=\"div\"\n      style={{\n        fontWeight: props.isSelected ? 500 : 400\n      }}\n      {...props.innerProps}\n    >\n      {props.children}\n    </MenuItem>\n  )\n}\n\nfunction Placeholder(props) {\n  return (\n    <Typography\n      color=\"textSecondary\"\n      className={props.selectProps.classes.placeholder}\n      {...props.innerProps}\n    >\n      {props.children}\n    </Typography>\n  )\n}\n\nfunction SingleValue(props) {\n  return (\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\n      {props.children}\n    </Typography>\n  )\n}\n\n\nfunction ValueContainer(props) {\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>\n}\n\n\nfunction Menu(props) {\n  return (\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\n      {props.children}\n    </Paper>\n  )\n}\n\nconst components = {\n  Control,\n  Menu,\n  NoOptionsMessage,\n  Option,\n  Placeholder,\n  SingleValue,\n  ValueContainer\n}\n\nexport default function SearchInput(props) {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [single, setSingle] = React.useState(null)\n\n  function handleChangeSingle(value) {\n    setSingle(value)\n    props.onChangeSearch(value)\n  }\n\n\n  const selectStyles = {\n    input: (base) => ({\n      ...base,\n      color: theme.palette.text.primary,\n      '& input': {\n        font: 'inherit'\n      }\n    })\n  }\n\n  return (\n    <div className={classes.root}>\n      <NoSsr>\n        <Select\n          isClearable\n          classes={classes}\n          styles={selectStyles}\n          inputId=\"react-select-single\"\n          TextFieldProps={{\n            label: 'Country',\n            InputLabelProps: {\n              htmlFor: 'react-select-single',\n              shrink: true\n            }\n          }}\n          placeholder=\"Search a country\"\n          options={suggestions}\n          components={components}\n          value={single}\n          onChange={handleChangeSingle}\n        />\n      </NoSsr>\n    </div>\n  )\n}\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport ToolBar from '@material-ui/core/ToolBar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport ArrowUpward from '@material-ui/icons/ArrowUpward'\nimport { makeStyles } from '@material-ui/core/styles'\nimport SearchInput from './SearchInput'\n\n\n/** custom Classes */\n\nconst useStyles = makeStyles(() => ({\n  bar: {\n    backgroundColor: '#4caf50',\n    paddingTop: 15,\n    marginBottom: 15,\n    position: 'sticky'\n  },\n  h1: {\n    fontSize: '2.5em',\n    fontWeight: 600,\n    color: '#000',\n    marginRight: 'auto'\n  },\n  barBtn: {\n    fontSize: '26'\n  },\n  barIco: {\n    color: '#4caf50',\n    fontSize: 32\n  }\n}))\n\nconst NavBar = (props) => {\n  const classes = useStyles()\n  const handleNavBtn = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' })\n  }\n\n  return (\n    <AppBar className={classes.bar}>\n      <ToolBar>\n        <Typography variant=\"h1\" className={classes.h1}>\n                    High air pollution !\n        </Typography>\n        <IconButton aria-label=\"Scroll up\" onClick={handleNavBtn} className={classes.barBtn} style={{ backgroundColor: 'black' }}>\n          <ArrowUpward className={classes.barIco} />\n        </IconButton>\n      </ToolBar>\n      <SearchInput onChangeSearch={props.onChangeSearch} />\n    </AppBar>\n  )\n}\nexport default NavBar\n","const sortData = (results) => {\n  // sort datas\n  const citiesData = []\n  let locations = []\n  let lastCityName = results[0].city\n\n  // sort each result\n  results.forEach((result, index) => {\n    // get result measurements  into array \"measures\"\n    const measures = []\n\n    result.measurements.forEach((measure) => {\n      const parameter = {}\n      parameter[measure.parameter] = measure.value\n      measures.push(parameter)\n    })\n\n    // check if its still the same city, than push it into array \"locations\"\n    if (result.city === lastCityName) {\n      locations.push(measures)\n\n      // else if its another city, than clear array and\n    } else {\n      // make it obj for readable keys\n      const cityLocations = {}\n      cityLocations.name = lastCityName\n      cityLocations.locations = locations\n\n      // push locations of last city into array \"citiesData\"\n      citiesData.push(cityLocations)\n\n      // push new into empty \"locations\"\n      locations = []\n      locations.push(measures)\n\n      // change last city name\n      lastCityName = result.city\n    }\n\n    // if its the last one push it into array \"citiesData\"\n    if (index === results.length - 1) {\n      // make it obj for readable keys\n      const cityLocations = {}\n      cityLocations.name = result.city\n      cityLocations.locations = locations\n\n      citiesData.push(cityLocations)\n    }\n  })\n\n  // Count the avarge of each measurement parameter\n  const cityParamsAvarges = []\n  citiesData.forEach((city, cityIndex) => {\n    const parSum = {\n      pm25: 0,\n      pm25Amount: 0,\n      pm10: 0,\n      pm10Amount: 0,\n      co: 0,\n      coAmount: 0,\n      o3: 0,\n      o3Amount: 0,\n      bc: 0,\n      bcAmount: 0,\n      so2: 0,\n      so2Amount: 0,\n      no2: 0,\n      no2Amount: 0\n    }\n\n    // Sum together all types od air pollution parameters\n    city.locations.forEach((location) => {\n      location.forEach((params) => {\n        const paramName = Object.getOwnPropertyNames(params)\n        switch (paramName[0]) {\n          case 'pm25':\n            parSum.pm25 += params.pm25\n            parSum.pm25Amount += 1\n            break\n          case 'pm10':\n            parSum.pm10 += params.pm10\n            parSum.pm10Amount += 1\n            break\n          case 'co':\n            parSum.co += params.co\n            parSum.coAmount += 1\n            break\n          case 'o3':\n            parSum.o3 += params.o3\n            parSum.o3Amount += 1\n            break\n          case 'bc':\n            parSum.bc += params.bc\n            parSum.bcAmount += 1\n            break\n          case 'so2':\n            parSum.so2 += params.so2\n            parSum.so2Amount += 1\n            break\n          case 'no2':\n            parSum.no2 += params.no2\n            parSum.no2Amount += 1\n            break\n          default: // nothing to do here\n            break\n        }\n      })\n    })\n\n\n    // checking function\n    const checkIfExist = (arg) => {\n      if (!arg) {\n        return 1\n      } return arg\n    }\n\n    // check all params\n    Object.keys(parSum).forEach((e) => {\n      if (e.includes('Amount')) {\n        parSum[e] = checkIfExist(parSum[e])\n      }\n    })\n\n    // set brand new array with counted params\n    cityParamsAvarges[cityIndex] = {\n      pm25: Math.floor(parSum.pm25 / parSum.pm25Amount),\n      pm10: Math.floor(parSum.pm10 / parSum.pm10Amount),\n      co: Math.floor(parSum.co / parSum.coAmount),\n      o3: Math.floor(parSum.o3 / parSum.o3Amount),\n      bc: Math.floor(parSum.bc / parSum.bcAmount),\n      so2: Math.floor(parSum.so2 / parSum.so2Amount),\n      no2: Math.floor(parSum.no2 / parSum.no2Amount),\n      cityName: city.name\n    }\n  })\n\n  // create array of cities parameter sum with same indexes !\n  const cityParamsSum = []\n  cityParamsAvarges.forEach((cityMeasurements, index) => {\n    let sum = 0\n    Object.entries(cityMeasurements).forEach((param) => {\n      if (param[0] !== 'cityName') {\n        sum += param[1]\n      }\n    })\n    cityParamsSum.push({ value: sum, index })\n  })\n\n  // sort all cities based on amount of their parameters !\n  cityParamsSum.sort((a, b) => b.value - a.value)\n\n  // cut out only 10 top polluted citiesa\n  cityParamsSum.splice(10)\n\n  // take out 10 top polluted cities, based on index of 10 top sorted\n  const top10Cities = []\n  cityParamsSum.forEach((param) => {\n    top10Cities.push(cityParamsAvarges[param.index])\n  })\n\n  // return it\n  return top10Cities\n}\n\nexport default sortData\n","import React from 'react'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Box from '@material-ui/core/Box'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Fade from '@material-ui/core/Fade'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    width: '100%',\n    overflowX: 'hidden'\n  },\n  panelSummary: {\n    fontWeight: 700\n  },\n  h2: {\n    fontSize: theme.typography.pxToRem(17),\n    fontWeight: 600\n  },\n  table: {\n    minWidth: '650',\n    overflowX: 'auto'\n  },\n  pCityDescribe: {\n    marginBottom: '15px'\n  }\n}))\n\n\nconst AccordionElement = ({\n  city,\n  country,\n  showed\n}) => {\n  const classes = useStyles()\n  const {\n    cityName, pm25, pm10, co, o3, bc, so2, no2\n  } = city\n  return (\n    <Fade in={showed} timeout={400}>\n      <Paper className={classes.paper}>\n        <ExpansionPanel className={classes.panelExpansion}>\n          <ExpansionPanelSummary\n            className={classes.panelSummary}\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls={`panel${cityName}a-content`}\n            id={`panel${cityName}a-header`}\n          >\n            <Typography variant=\"h2\" className={classes.h2}>\n              {cityName}\n            </Typography>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <Box display=\"flex\" flexDirection=\"column\" style={{ overflowX: 'auto' }}>\n              <Typography className={classes.pCityDescribe}>\n                {`Latest air pollution measurement in ${country}.`}\n              </Typography>\n              <Box display=\"flex\" flexDirection=\"column\">\n                <Table className={classes.table}>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell align=\"left\">PM25</TableCell>\n                      <TableCell align=\"left\">PM10</TableCell>\n                      <TableCell align=\"left\">CO</TableCell>\n                      <TableCell align=\"left\">O3</TableCell>\n                      <TableCell align=\"left\">BC</TableCell>\n                      <TableCell align=\"left\">SO2</TableCell>\n                      <TableCell align=\"left\">NO2</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    <TableRow key=\"row\">\n                      <TableCell align=\"left\">{`${pm25} µg/m³`}</TableCell>\n                      <TableCell align=\"left\">{`${pm10} µg/m³`}</TableCell>\n                      <TableCell align=\"left\">{`${co} µg/m³`}</TableCell>\n                      <TableCell align=\"left\">{`${o3} µg/m³`}</TableCell>\n                      <TableCell align=\"left\">{`${bc} µg/m³`}</TableCell>\n                      <TableCell align=\"left\">{`${so2} µg/m³`}</TableCell>\n                      <TableCell align=\"left\">{`${no2} µg/m³`}</TableCell>\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </Box>\n            </Box>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </Paper>\n    </Fade>\n  )\n}\nexport default AccordionElement\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport AccordionElement from './AccordionElement'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst useStyles = makeStyles(() => ({\n  progress: {\n    position: 'fixed',\n    left: 'calc(50% - 20px)',\n    top: 'calc(50% + 80px)',\n    color: '#4caf50'\n  }\n}))\n\nconst Main = ({\n  cities,\n  country,\n  error,\n  showed\n}) => {\n  const classes = useStyles()\n  const preloader = showed ? 'none' : 'block'\n\n  return (\n    <>\n      <Typography variant=\"h4\" align=\"center\" paragraph>{country || error}</Typography>\n      <div>\n        <CircularProgress style={{ display: preloader }} className={classes.progress} />\n        {cities.map((city) => (\n          <AccordionElement\n            city={city}\n            showed={showed}\n            key={`city${city.cityName}`}\n            country={country}\n          />\n        ))}\n      </div>\n    </>\n  )\n}\nexport default Main\n","import React, { Component } from 'react'\nimport MetaTags from 'react-meta-tags'\nimport NavBar from './components/NavBar'\nimport sort from './utils/sort'\nimport Main from './components/Main'\nimport './App.css'\n\n\nclass App extends Component {\n  state = {\n    cities: [],\n    countryInput: null,\n    countryName: null,\n    error: null,\n    accordionIsShowed: true\n  }\n  /** LocalStorage getting */\n  async componentDidMount() {\n    const localData = JSON.parse(localStorage.getItem('localData'))\n    const localDataCountry = JSON.parse(localStorage.getItem('localDataCountry'))\n\n    if (localData) {\n      let countryName = localDataCountry\n\n      switch (countryName) {\n        case 'FR': countryName = 'France'\n          break\n        case 'DE': countryName = 'Germany'\n          break\n        case 'PL': countryName = 'Poland'\n          break\n        case 'ES': countryName = 'Spain'\n          break\n        default: // nothing to do here\n          break\n      }\n      this.setState({\n        countryName,\n        cities: localData\n      })\n    }\n  }\n\n   onChangeSearch = async(e) => {\n    if (e) {\n      const { value } = e\n      let actualCountryInput\n\n      switch (value) {\n        case 'France': actualCountryInput = 'FR'\n          break\n        case 'Germany': actualCountryInput = 'DE'\n          break\n        case 'Poland': actualCountryInput = 'PL'\n          break\n        case 'Spain': actualCountryInput = 'ES'\n          break\n        default: // nothing to do here\n          break\n      }\n\n      const { countryInput } = this.state\n      if (actualCountryInput !== countryInput) {\n        await this.setState({\n          countryInput: actualCountryInput,\n          accordionIsShowed: false,\n          countryName: value\n        })\n        await this.getData()\n        this.setState({ accordionIsShowed: true })\n      }\n    }\n  }\n\n  async getData() {\n    const { countryInput } = this.state\n\n    const url = `https://api.openaq.org/v1/latest?country=${countryInput}&order_by=city&limit=10000`\n    const res = await fetch(url)\n\n    if (res.ok) {\n      localStorage.setItem('localDataCountry', JSON.stringify(this.state.countryInput))\n      const data = await res.json()\n\n      if (data.results) {\n        const datas = await sort(data.results)\n        this.setState({ cities: datas, error: null })\n        localStorage.setItem('localData', JSON.stringify(datas))\n      }\n    } else {\n      this.setState({ error: res.statusText })\n    }\n  }\n\n  render() {\n    const {\n      cities, accordionIsShowed, error\n    } = this.state\n    return (\n      <>\n        <MetaTags>\n          <title>Top 10 air pollution city</title>\n          <meta\n            name=\"description\"\n            content=\"Top 10 air-polluted cities in Europe. Latest air quality\n             measure in European Union. App show true quality of European country.\"\n          />\n          <meta name=\"keywords\" content=\"air, quality, pollution, latest, tests\" />\n          <meta property=\"og:title\" content=\"Air quality\" />\n          <meta name=\"author\" content=\"Brian Wala\" />\n        </MetaTags>\n        <NavBar onChangeSearch={this.onChangeSearch} />\n        <Main\n          cities={cities}\n          showed={accordionIsShowed}\n          error={error}\n        />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.register();\n\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
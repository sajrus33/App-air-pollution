{"version":3,"sources":["components/SearchInput.js","components/NavBar.js","components/sort.js","components/AccordionElement.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["suggestions","label","map","suggestion","value","useStyles","makeStyles","theme","root","flexGrow","marginTop","backgroundColor","input","display","padding","height","valueContainer","flexWrap","flex","alignItems","overflow","noOptionsMessage","spacing","singleValue","fontSize","placeholder","position","left","bottom","paper","zIndex","right","inputComponent","_ref","inputRef","props","Object","objectWithoutProperties","react_default","a","createElement","assign","ref","components","Control","children","innerProps","innerRef","_props$selectProps","selectProps","classes","TextFieldProps","TextField","fullWidth","InputProps","inputProps","objectSpread","className","Menu","Paper","square","NoOptionsMessage","Typography","color","Option","MenuItem","selected","isFocused","component","style","fontWeight","isSelected","Placeholder","SingleValue","ValueContainer","SearchInput","useTheme","_React$useState","React","useState","_React$useState2","slicedToArray","single","setSingle","selectStyles","base","palette","text","primary","& input","font","NoSsr","react_select_browser_esm","isClearable","backspaceRemoves","deleteRemoves","searchable","styles","inputId","InputLabelProps","htmlFor","shrink","options","onChange","onChangeSearch","bar","paddingTop","marginBottom","h1","marginRight","barBtn","barIco","NavBar","AppBar","Toolbar","variant","IconButton","aria-label","onClick","window","scrollTo","top","behavior","ArrowUpward_default","sortData","results","citiesData","locations","lastCityName","city","forEach","result","index","measures","measurements","measure","parameter","push","cityLocations","length","cityParamsAvarge","cityI","parSum","pm25","pm25Amount","pm10","pm10Amount","co","coAmount","o3","o3Amount","bc","bcAmount","so2","so2Amount","no2","no2Amount","location","params","getOwnPropertyNames","keys","e","includes","Math","floor","name","cityParamsSum","param","i","sort","b","splice","top10Cities","width","overflowX","panelSummary","heading","typography","pxToRem","table","minWidth","AccordionElement","Fade","in","showed","timeout","ExpansionPanel","panelExpansion","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","id","cityName","ExpansionPanelDetails","Box","flexDirection","cityDescribe","Table","TableHead","TableRow","TableCell","align","TableBody","key","progress","Main","preloader","createdElements","cities","components_AccordionElement","concat","country","Fragment","paragraph","error","CircularProgress","App","state","countryInput","countryName","AccordionShowed","this","url","fetch","res","ok","localStorage","setItem","JSON","stringify","json","data","datas","setState","statusText","localData","parse","getItem","localDataCountry","inputValue","shortcutValue","getData","lib_default","content","property","components_NavBar","bind","components_Main","Component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9b8aa2c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport NoSsr from '@material-ui/core/NoSsr';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst suggestions = [\r\n  { label: 'France' },\r\n  { label: 'Germany' },\r\n  { label: 'Spain' },\r\n  { label: 'Poland' },\r\n\r\n].map(suggestion => ({\r\n  value: suggestion.label,\r\n  label: suggestion.label,\r\n}));\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: 15,\r\n    backgroundColor: \"white\"\r\n  },\r\n  input: {\r\n    display: 'flex',\r\n    padding: 0,\r\n    height: 'auto',\r\n  },\r\n  valueContainer: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    overflow: 'hidden',\r\n  },\r\n  noOptionsMessage: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  singleValue: {\r\n    fontSize: 18,\r\n  },\r\n  placeholder: {\r\n    position: 'absolute',\r\n    left: 2,\r\n    bottom: 6,\r\n    fontSize: 16,\r\n  },\r\n  paper: {\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    marginTop: theme.spacing(1),\r\n    left: 0,\r\n    right: 0,\r\n  }\r\n\r\n}));\r\n\r\nfunction NoOptionsMessage(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.noOptionsMessage}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nNoOptionsMessage.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction inputComponent({ inputRef, ...props }) {\r\n  return <div ref={inputRef} {...props} />;\r\n}\r\n\r\ninputComponent.propTypes = {\r\n  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n};\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    innerRef,\r\n    selectProps: { classes, TextFieldProps },\r\n  } = props;\r\n\r\n  return (\r\n    <TextField\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent,\r\n        inputProps: {\r\n          className: classes.input,\r\n          ref: innerRef,\r\n          children,\r\n          ...innerProps,\r\n        },\r\n      }}\r\n      {...TextFieldProps}\r\n    />\r\n  );\r\n}\r\n\r\nControl.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction Option(props) {\r\n  return (\r\n    <MenuItem\r\n      ref={props.innerRef}\r\n      selected={props.isFocused}\r\n      component=\"div\"\r\n      style={{\r\n        fontWeight: props.isSelected ? 500 : 400,\r\n      }}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nOption.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\r\n  isFocused: PropTypes.bool,\r\n  isSelected: PropTypes.bool,\r\n};\r\n\r\nfunction Placeholder(props) {\r\n  return (\r\n    <Typography\r\n      color=\"textSecondary\"\r\n      className={props.selectProps.classes.placeholder}\r\n      {...props.innerProps}\r\n    >\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nPlaceholder.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <Typography className={props.selectProps.classes.singleValue} {...props.innerProps}>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nSingleValue.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\nfunction ValueContainer(props) {\r\n  return <div className={props.selectProps.classes.valueContainer}>{props.children}</div>;\r\n}\r\n\r\nValueContainer.propTypes = {\r\n  children: PropTypes.node,\r\n  selectProps: PropTypes.object.isRequired,\r\n};\r\n\r\n\r\n\r\nfunction Menu(props) {\r\n  return (\r\n    <Paper square className={props.selectProps.classes.paper} {...props.innerProps}>\r\n      {props.children}\r\n    </Paper>\r\n  );\r\n}\r\n\r\nMenu.propTypes = {\r\n  children: PropTypes.node,\r\n  innerProps: PropTypes.object,\r\n  selectProps: PropTypes.object,\r\n};\r\n\r\nconst components = {\r\n  Control,\r\n  Menu,\r\n  NoOptionsMessage,\r\n  Option,\r\n  Placeholder,\r\n  SingleValue,\r\n  ValueContainer,\r\n};\r\n\r\nexport default function SearchInput(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [single, setSingle] = React.useState(null);\r\n\r\n  function handleChangeSingle(value) {\r\n      setSingle(value);\r\n      props.onChangeSearch(value);\r\n\r\n  }\r\n\r\n\r\n  const selectStyles = {\r\n    input: base => ({\r\n      ...base,\r\n      color: theme.palette.text.primary,\r\n      '& input': {\r\n        font: 'inherit',\r\n      },\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <NoSsr>\r\n        <Select\r\n          isClearable={true}\r\n          backspaceRemoves={true} deleteRemoves={true} searchable={true}\r\n          classes={classes}\r\n          styles={selectStyles}\r\n          inputId=\"react-select-single\"\r\n          TextFieldProps={{\r\n            label: 'Country',\r\n            InputLabelProps: {\r\n              htmlFor: 'react-select-single',\r\n              shrink: true,\r\n            },\r\n          }}\r\n          placeholder=\"Search a country\"\r\n          options={suggestions}\r\n          components={components}\r\n          value={single}\r\n          onChange={handleChangeSingle}\r\n\r\n\r\n        />\r\n      </NoSsr>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport ToolBar from \"@material-ui/core/ToolBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowUpward from \"@material-ui/icons/ArrowUpward\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SearchInput from '../components/SearchInput';\r\n\r\n\r\n/** custom Classes */\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    bar: {\r\n        backgroundColor: \"#4caf50\",\r\n        paddingTop: 15,\r\n        marginBottom: 15,\r\n        position: \"sticky\"\r\n    },\r\n    h1: {\r\n        fontSize: \"2.5em\",\r\n        fontWeight: 600,\r\n        color: \"#000\",\r\n        marginRight: \"auto\"\r\n    },\r\n    barBtn: {\r\n        fontSize: \"26\"\r\n    },\r\n    barIco: {\r\n        color: \"#4caf50\",\r\n        fontSize: 32\r\n    }\r\n}));\r\n\r\n/** Navigation Bar */\r\n\r\nconst NavBar = props => {\r\n    const classes = useStyles();\r\n\r\n    /** Click handler for NavBar > Button */\r\n\r\n    const handleNavBtn = () => {\r\n        window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n\r\n    return (\r\n\r\n        <AppBar className={classes.bar} >\r\n            <ToolBar>\r\n                <Typography variant=\"h1\" className={classes.h1}>\r\n                    High air pollution !\r\n                </Typography>\r\n                <IconButton aria-label=\"Scroll up\" onClick={handleNavBtn} className={classes.barBtn} style={{ backgroundColor: \"black\" }}>\r\n                    <ArrowUpward className={classes.barIco} />\r\n                </IconButton>\r\n            </ToolBar>\r\n            <SearchInput onChangeSearch={props.onChangeSearch} />\r\n\r\n        </AppBar>\r\n\r\n    )\r\n}\r\nexport default NavBar;\r\n","const sortData = (results) => {\r\n    // sort datas\r\n    const citiesData = [];\r\n    let locations = [];\r\n    let lastCityName = results[0].city;\r\n\r\n    // sort each result\r\n    results.forEach((result, index) => {\r\n\r\n        // get result measurements  into array \"measures\"\r\n        const measures = [];\r\n\r\n        result.measurements.forEach(measure => {\r\n            const parameter = {};\r\n            parameter[measure.parameter] = measure.value;\r\n            measures.push(parameter);\r\n        })\r\n\r\n        // check if its still the same city, than push it into array \"locations\" \r\n        if (result.city === lastCityName) {\r\n            locations.push(measures);\r\n\r\n            // else if its another city, than clear array and \r\n        } else {\r\n\r\n            // make it obj for readable keys\r\n            const cityLocations = {};\r\n            cityLocations[\"name\"] = lastCityName;\r\n            cityLocations[\"locations\"] = locations;\r\n\r\n            //push locations of last city into array \"citiesData\"\r\n            citiesData.push(cityLocations);\r\n\r\n            // push new into empty \"locations\" \r\n            locations = [];\r\n            locations.push(measures)\r\n\r\n            // change last city name\r\n            lastCityName = result.city;\r\n        }\r\n\r\n        // if its the last one push it into array \"citiesData\"\r\n        if (index === results.length - 1) {\r\n\r\n            // make it obj for readable keys\r\n            const cityLocations = {};\r\n            cityLocations[\"name\"] = result.city;\r\n            cityLocations[\"locations\"] = locations;\r\n\r\n            citiesData.push(cityLocations);\r\n        }\r\n    });\r\n\r\n    // Count the avarge of each measurement parameter\r\n    let cityParamsAvarge = [];\r\n    citiesData.forEach((city, cityI) => {\r\n        let parSum = {\r\n            pm25: 0, pm25Amount: 0,\r\n            pm10: 0, pm10Amount: 0,\r\n            co: 0, coAmount: 0,\r\n            o3: 0, o3Amount: 0,\r\n            bc: 0, bcAmount: 0,\r\n            so2: 0, so2Amount: 0,\r\n            no2: 0, no2Amount: 0,\r\n        };\r\n\r\n        // Sum together all types od air pollution parameters\r\n        city.locations.forEach(location => {\r\n            location.forEach(params => {\r\n                const paramName = Object.getOwnPropertyNames(params);\r\n                switch (paramName[0]) {\r\n                    case \"pm25\":\r\n                        parSum.pm25 += params.pm25;\r\n                        parSum.pm25Amount += 1;\r\n                        break;\r\n                    case \"pm10\":\r\n                        parSum.pm10 += params.pm10;\r\n                        parSum.pm10Amount += 1;\r\n                        break;\r\n                    case \"co\":\r\n                        parSum.co += params.co;\r\n                        parSum.coAmount += 1;\r\n                        break;\r\n                    case \"o3\":\r\n                        parSum.o3 += params.o3;\r\n                        parSum.o3Amount += 1;\r\n                        break;\r\n                    case \"bc\":\r\n                        parSum.bc += params.bc;\r\n                        parSum.bcAmount += 1;\r\n                        break;\r\n                    case \"so2\":\r\n                        parSum.so2 += params.so2;\r\n                        parSum.so2Amount += 1;\r\n                        break;\r\n                    case \"no2\":\r\n                        parSum.no2 += params.no2;\r\n                        parSum.no2Amount += 1;\r\n                        break;\r\n                    default: //nothing to do here\r\n                        break;\r\n                }\r\n\r\n            });\r\n        });\r\n\r\n\r\n        // checking function \r\n        const checkIfExist = arg => {\r\n            if (!arg) {\r\n                return arg = 1;\r\n            } else\r\n                return arg\r\n        };\r\n\r\n        // check all params\r\n        Object.keys(parSum).forEach(e => {\r\n            if (e.includes(\"Amount\")) {\r\n                parSum[e] = checkIfExist(parSum[e]);\r\n            }\r\n        });\r\n\r\n        //set brand new array with counted params\r\n        cityParamsAvarge[cityI] = [\r\n            Math.floor(parSum.pm25 / parSum.pm25Amount),\r\n            Math.floor(parSum.pm10 / parSum.pm10Amount),\r\n            Math.floor(parSum.co / parSum.coAmount),\r\n            Math.floor(parSum.o3 / parSum.o3Amount),\r\n            Math.floor(parSum.bc / parSum.bcAmount),\r\n            Math.floor(parSum.so2 / parSum.so2Amount),\r\n            Math.floor(parSum.no2 / parSum.no2Amount),\r\n            city.name\r\n        ];\r\n    });\r\n\r\n\r\n    // create array of cities parameter sum with indexes !\r\n    let cityParamsSum = [];\r\n    cityParamsAvarge.forEach((param, index) => {\r\n        cityParamsSum[index] = { value: 0 };\r\n        cityParamsSum[index].index = index;\r\n        for (let i = 0; i < 6; i++) {\r\n            cityParamsSum[index].value += param[i];\r\n        }\r\n    });\r\n\r\n    // sort all cities based on amount of their parameters !\r\n    cityParamsSum.sort((a, b) => {\r\n        return b.value - a.value;\r\n    });\r\n\r\n    // cut out only 10 top polluted cities\r\n    cityParamsSum.splice(10);\r\n\r\n    // take out 10 top polluted cities, based on index of 10 top sorted\r\n    const top10Cities = [];\r\n    cityParamsSum.forEach(param => {\r\n        top10Cities.push(cityParamsAvarge[param.index]);\r\n    });\r\n\r\n    // return it\r\n    return top10Cities;\r\n}\r\n\r\nexport default sortData;","import React from 'react';\r\n\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        width: \"100%\",\r\n        overflowX: 'hidden',\r\n\r\n    },\r\n    panelSummary: {\r\n        fontWeight: 700,\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(17),\r\n        fontWeight: 600,\r\n    },\r\n    table: {\r\n        minWidth:\"650\",\r\n        overflowX: 'auto',\r\n\r\n    },\r\n}));\r\n\r\n/** Single Accordion Element */\r\n\r\nconst AccordionElement = props => {\r\n    const classes = useStyles();\r\n    return (\r\n\r\n        <Fade in={props.showed} timeout={400}>\r\n            <Paper className={classes.root}>\r\n                <ExpansionPanel className={classes.panelExpansion} >\r\n                    <ExpansionPanelSummary className={classes.panelSummary}\r\n                        expandIcon={<ExpandMoreIcon />}\r\n                        aria-controls={\"panel\" + props.index + \"a-content\"}\r\n                        id={\"panel\" + props.index + \"a-header\"}>\r\n                        <Typography variant=\"h2\" className={classes.heading}> {props.cityName}</Typography>\r\n                    </ExpansionPanelSummary>\r\n                    <ExpansionPanelDetails >\r\n                        <Box display=\"flex\" flexDirection=\"column\" style={{ overflowX: \"auto\" }}>\r\n                            <Typography style={{ marginBottom: \"15px\" }}>\r\n                                {props.cityDescribe}\r\n                            </Typography>\r\n                            <Box display=\"flex\" flexDirection=\"column\" style={{ overflowX: \"auto\" }}>\r\n                                <Table className={classes.table} >\r\n                                    <TableHead >\r\n                                        <TableRow >\r\n                                            <TableCell align=\"left\">PM25</TableCell>\r\n                                            <TableCell align=\"left\">PM10</TableCell>\r\n                                            <TableCell align=\"left\">CO</TableCell>\r\n                                            <TableCell align=\"left\">O3</TableCell>\r\n                                            <TableCell align=\"left\">BC</TableCell>\r\n                                            <TableCell align=\"left\">SO2</TableCell>\r\n                                            <TableCell align=\"left\">NO2</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody >\r\n                                        <TableRow key={\"row\"}>\r\n                                            <TableCell align=\"left\">{props.pm25} µg/m³</TableCell>\r\n                                            <TableCell align=\"left\">{props.pm10} µg/m³</TableCell>\r\n                                            <TableCell align=\"left\">{props.co} µg/m³</TableCell>\r\n                                            <TableCell align=\"left\">{props.o3} µg/m³</TableCell>\r\n                                            <TableCell align=\"left\">{props.bc} µg/m³</TableCell>\r\n                                            <TableCell align=\"left\">{props.so2} µg/m³</TableCell>\r\n                                            <TableCell align=\"left\">{props.no2} µg/m³</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Box>\r\n                        </Box>\r\n                    </ExpansionPanelDetails>\r\n                </ExpansionPanel>\r\n            </Paper>\r\n        </Fade>\r\n\r\n    )\r\n}\r\nexport default AccordionElement;\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AccordionElement from '../components/AccordionElement';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n/**custom Classes*/\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n\r\n    progress: {\r\n        position: \"fixed\",\r\n        left: \"calc(50% - 20px)\",\r\n        top: \"calc(50% + 80px)\",\r\n        color: \"#4caf50\"\r\n    }\r\n}));\r\n\r\n/** Main > SearchInput + Accordion */\r\n\r\nconst Main = props => {\r\n    const classes = useStyles();\r\n    const createdElements = [];\r\n\r\n    let preloader;\r\n    preloader = props.showed ? \"none\" : \"block\";\r\n\r\n    /** Create Accordion based on SearchInput value */\r\n    const loadAccordion = () => {\r\n        props.cities.forEach((city, i) => {\r\n            const pm25 = props.cities[i][0];\r\n            const pm10 = props.cities[i][1];\r\n            const co = props.cities[i][2];\r\n            const o3 = props.cities[i][3];\r\n            const bc = props.cities[i][4];\r\n            const so2 = props.cities[i][5];\r\n            const no2 = props.cities[i][6];\r\n            const cityName = props.cities[i][7];\r\n\r\n\r\n            createdElements.push(\r\n                <AccordionElement\r\n                    classes={classes}\r\n                    showed={props.showed}\r\n                    key={i}\r\n                    index={i}\r\n                    cityName={cityName}\r\n                    cityDescribe={`  \r\n                        Latest air pollution measurement in ${props.country}.\r\n                     `}\r\n                     pm25={pm25}\r\n                     pm10={pm10}\r\n                     co={co}\r\n                     o3={o3}\r\n                     bc={bc}\r\n                     so2={so2}\r\n                     no2={no2}\r\n                    />\r\n            )\r\n        })\r\n    }\r\n    loadAccordion();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Typography variant=\"h4\" align=\"center\" paragraph={true}>{props.country ? props.country : props.error}</Typography>\r\n            <div>\r\n                <CircularProgress style={{ display: preloader }} className={classes.progress} />\r\n                {createdElements}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Main;\r\n\r\n","import React, { Component } from 'react';\r\nimport MetaTags from 'react-meta-tags';\r\nimport NavBar from './components/NavBar';\r\nimport sort from './components/sort';\r\n\r\n\r\nimport Main from './components/Main';\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cities: [],\r\n    countryInput: null,\r\n    countryName: null,\r\n    error: null,\r\n    AccordionShowed: true\r\n  }\r\n\r\n  /** Fetch data and validate it */\r\n\r\n  async getData() {\r\n\r\n    /** Sort data */\r\n    // imported from components/sort.js\r\n    const sortData = sort;\r\n\r\n\r\n    // fetch data\r\n    const country = this.state.countryInput;\r\n\r\n    const url = `https://api.openaq.org/v1/latest?country=${country}&order_by=city&limit=10000`;\r\n    const res = await fetch(url);\r\n    let data;\r\n\r\n    if (res.ok) {\r\n      localStorage.setItem(\"localDataCountry\", JSON.stringify(this.state.countryInput));\r\n      data = await res.json();\r\n\r\n      if (data.results) {\r\n\r\n        const datas = await sortData(data.results);\r\n        this.setState({ cities: datas, error: null });\r\n\r\n        // storage actual data\r\n        localStorage.setItem(\"localData\", JSON.stringify(datas));\r\n\r\n      }\r\n      // custom Throw Error\r\n    } else {\r\n      this.setState({ error: res.statusText });\r\n    }\r\n  }\r\n\r\n  /** LocalStorage getting */\r\n\r\n  async componentDidMount() {\r\n\r\n    const localData = JSON.parse(localStorage.getItem(\"localData\"));\r\n    const localDataCountry = JSON.parse(localStorage.getItem(\"localDataCountry\"));\r\n\r\n    if (localData) {\r\n      let countryName = localDataCountry;\r\n\r\n      switch (countryName) {\r\n        case \"FR\": countryName = \"France\"\r\n          break;\r\n        case \"DE\": countryName = \"Germany\"\r\n          break;\r\n        case \"PL\": countryName = \"Poland\"\r\n          break;\r\n        case \"ES\": countryName = \"Spain\"\r\n          break;\r\n        default: //nothing to do here\r\n          break;\r\n      }\r\n\r\n      this.setState({\r\n        countryName: countryName,\r\n        cities: localData,\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  /** Input change handler for SearchInput */\r\n\r\n  async onChangeSearch(e) {\r\n    \r\n    if(e){\r\n    const inputValue = e.value;\r\n\r\n      let shortcutValue = this.state.countryInput;\r\n\r\n      switch (inputValue) {\r\n        case \"France\": shortcutValue = \"FR\"\r\n          break;\r\n        case \"Germany\": shortcutValue = \"DE\"\r\n          break;\r\n        case \"Poland\": shortcutValue = \"PL\"\r\n          break;\r\n        case \"Spain\": shortcutValue = \"ES\"\r\n          break;\r\n        default: //nothing to do here\r\n          break;\r\n    }\r\n    // if there is different input than last one\r\n    if (shortcutValue !== this.state.countryInput) {\r\n\r\n      await this.setState({\r\n        countryInput: shortcutValue,\r\n        AccordionShowed: false,\r\n        countryName: inputValue\r\n      });\r\n      // fetch new data\r\n      await this.getData();\r\n      // Run Accordion Elements Animation <Fade>\r\n      this.setState({ AccordionShowed: true });\r\n    }\r\n\r\n    }\r\n\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment >\r\n       <MetaTags>\r\n            <title>Top 10 air pollution city</title>\r\n            <meta name=\"description\" \r\n            content=\"Top 10 air-polluted cities in Europe. Latest air quality\r\n             measure in European Union. App show true quality of European country.\" />\r\n            <meta name=\"keywords\" content=\"air, quality, pollution, latest, tests\"></meta>\r\n            <meta property=\"og:title\" content=\"Air quality\" />\r\n            <meta name=\"author\" content=\"Brian Wala\"/>\r\n          </MetaTags>\r\n        <NavBar onChangeSearch={this.onChangeSearch.bind(this)} />\r\n        <Main\r\n          country={this.state.countryName}\r\n          cities={this.state.cities}\r\n          showed={this.state.AccordionShowed}\r\n          error={this.state.error} />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.1/8 is considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.register();\r\n\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}